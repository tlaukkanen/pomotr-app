# Docker
# Build a Docker image 
# https://docs.microsoft.com/azure/devops/pipelines/languages/docker

trigger:
  branches:
    include:
    - master

resources:
- repo: self

variables:
- group: vg-pomotr-dev
- name: tag
  value: '$(Build.BuildId)'
- name: imageName
  value: 'pomotr:$(build.buildNumber)'
- name: buildConfiguration
  value: 'Release'

stages:
- stage: Build
  displayName: Build image
  jobs:  
  - job: Build
    displayName: Build
    pool:
      vmImage: 'ubuntu-latest'    
    steps:
    - task: UseDotNet@2 
      displayName: ".NET Core 2.x"
      inputs:
        version: '2.x'
        packageType: sdk
        
    - task: SonarCloudPrepare@1
      inputs:
        SonarCloud: 'SonarCloud-PomotrApp'
        organization: 'tlaukkanen'
        scannerMode: 'MSBuild'
        projectKey: 'tlaukkanen_pomotr-app'
        projectName: 'Pomotr'
        
    - task: UseDotNet@2 
      displayName: ".NET Core 3.1.x"
      inputs:
        version: '3.1.x'
        packageType: sdk
        
    # Build
    - script: dotnet build --configuration $(buildConfiguration)
      displayName: 'dotnet build $(buildConfiguration)'
      
    # Create EF Migrations
    - script: dotnet tool install --global dotnet-ef
      displayName: 'Install EF Core tool'
    - script: dotnet ef migrations script --project ./PomotrApp --idempotent --output $(Build.ArtifactStagingDirectory)/sql/update_to_latest.sql
      displayName: 'Create SQL script for EF migrations'
      
    # Vulnerability scan 
    - task: WhiteSource Bolt@19
      displayName: 'Run WhiteSource Bolt'
      
    # Publish (zip)
    - task: DotNetCoreCLI@2
      displayName: 'Publish the project - Release'
      inputs:
        command: 'publish'
        projects: 'PomotrApp/*.csproj'
        publishWebProjects: false
        arguments: '--no-build --configuration Release --output $(Build.ArtifactStagingDirectory)/Release'
        zipAfterPublish: true
        
    # Unit tests
    #- script: dotnet test  --collect:"Code Coverage" --results-directory $(System.DefaultWorkingDirectory)/test-results/ --logger "trx;LogFileName=test-results.xml" /p:CollectCoverage=true /p:CoverletOutputFormat=cobertura /p:CoverletOutput=$(System.DefaultWorkingDirectory)/test-results/test-results-coverage.xml ./PomotrApp.Tests/PomotrApp.Tests.csproj
    #  displayName: 'Run unit tests'

    - task: DotNetCoreCLI@2
      inputs:
        command: 'test'
        arguments: '--configuration $(BuildConfiguration) --results-directory $(System.DefaultWorkingDirectory)/test-results/ /p:CollectCoverage=true /p:CoverletOutputFormat=opencover --logger trx ./PomotrApp.Tests/PomotrApp.Tests.csproj'
        testRunTitle: 'dotnet test'

    - script: ls $(System.DefaultWorkingDirectory)/test-results/
      displayName: 'List files in test-results folder'
    - script: ls $(System.DefaultWorkingDirectory)
      displayName: 'List files in test-results folder'

    # Publish test results
    - task: PublishTestResults@2
      inputs:
        testResultsFormat: 'VSTest'
        testResultsFiles: '**/*.xml'
        searchFolder: '$(System.DefaultWorkingDirectory)/test-results'
        publishRunAttachments: true
      displayName: 'Publish test results'

    # Publish test coverage
    - task: PublishCodeCoverageResults@1
      displayName: 'Publish coverage reports'
      inputs:
        codeCoverageTool: 'cobertura'
        summaryFileLocation: '$(System.DefaultWorkingDirectory)/test-results/test-results-coverage.xml'
        #summaryFileLocation: '$(System.DefaultWorkingDirectory)/test-results/coverage.xml'
        #pathToSources: '$(System.DefaultWorkingDirectory)/PomotrApp'
        #reportDirectory: '$(System.DefaultWorkingDirectory)/test-results/'
        failIfCoverageEmpty: false
        
    - task: SonarCloudAnalyze@1
    - task: SonarCloudPublish@1
      inputs:
        pollingTimeoutSec: '300'

    # Publish package (zip)
    - publish: '$(Build.ArtifactStagingDirectory)'
      artifact: drop
      condition: succeeded()
      
- stage: 'Deploy'
  displayName: 'Deploy to DEV environment'
  dependsOn: Build
  condition: and(succeeded(), eq(variables['Build.SourceBranch'], 'refs/heads/master')) 
  jobs:
  - deployment: Deploy
    pool:
      vmImage: 'windows-latest'
    environment: dev
    strategy:
      runOnce:
        deploy:
          steps:
            - download: current
              artifact: drop

            - task: AzureWebApp@1
              displayName: 'Azure App Service Deploy: website'
              inputs:
                azureSubscription: 'sc-pomotr-dev'
                appName: 'pomotr-dev'
                package: '$(Pipeline.Workspace)/**/PomotrApp.zip'

            - task: SqlAzureDacpacDeployment@1
              displayName: 'Apply database schema changes'
              inputs:
                azureSubscription: 'sc-pomotr-dev'
                ServerName: '$(SqlServerNameDev).database.windows.net'
                DatabaseName: '$(DbNameDev)'
                SqlUsername: '$(DbLoginDev)'
                SqlPassword: '$(DbPasswordDev)'
                deployType: SqlTask
                SqlFile: '$(Pipeline.Workspace)/drop/sql/update_to_latest.sql'
