# Docker
# Build a Docker image 
# https://docs.microsoft.com/azure/devops/pipelines/languages/docker

trigger:
  branches:
    include:
    - master

resources:
- repo: self

variables:
  tag: '$(Build.BuildId)'
  imageName: 'pomotr:$(build.buildNumber)'
  buildConfiguration: 'Release'

stages:
- stage: Build
  displayName: Build image
  jobs:  
  - job: Build
    displayName: Build
    pool:
      vmImage: 'ubuntu-latest'    
    steps:
    - task: UseDotNet@2 
      displayName: ".NET Core 3.1.x"
      inputs:
        version: '3.1.x'
        packageType: sdk
    # Build
    - script: dotnet build --configuration $(buildConfiguration)
      displayName: 'dotnet build $(buildConfiguration)'
    # Vulnerability scan 
    - task: WhiteSource Bolt@19
      displayName: 'Run WhiteSource Bolt'
    # Publish (zip)
    - task: DotNetCoreCLI@2
      displayName: 'Publish the project - Release'
      inputs:
        command: 'publish'
        projects: 'PomotrApp/*.csproj'
        publishWebProjects: false
        arguments: '--no-build --configuration Release --output $(Build.ArtifactStagingDirectory)/Release'
        zipAfterPublish: true
    # Unit tests
    - script: dotnet test --results-directory ./test-results --logger "trx;LogFileName=test-results.xml" /p:CollectCoverage=true /p:CoverletOutputFormat=cobertura /p:CoverletOutput=../test-results/coverage.xml ./PomotrApp.Tests/PomotrApp.Tests.csproj
      displayName: 'Run unit tests'
    # Publish test results
    - task: PublishTestResults@2
      inputs:
        testResultsFormat: 'VSTest'
        testResultsFiles: '**/test*.xml'
        searchFolder: '$(System.DefaultWorkingDirectory)/test-results'
        publishRunAttachments: true
      displayName: 'Publish test results'
    # Publish test coverage
    - task: PublishCodeCoverageResults@1
      inputs:
        codeCoverageTool: 'cobertura'
        summaryFileLocation: '$(System.DefaultWorkingDirectory)/test-results/coverage/coverage.xml'
      displayName: 'Publish coverage reports'
    # Publish package (zip)
    - publish: '$(Build.ArtifactStagingDirectory)'
      artifact: drop
      condition: succeeded()
- stage: 'Deploy'
  displayName: 'Deploy to DEV environment'
  dependsOn: Build
  jobs:
  - deployment: Deploy
    pool:
      vmImage: 'ubuntu-latest'
    environment: dev
    strategy:
      runOnce:
        deploy:
          steps:
            - download: current
              artifact: drop
            - task: AzureWebApp@1
              displayName: 'Azure App Service Deploy: website'
              inputs:
                azureSubscription: 'sc-pomotr-dev'
                appName: 'pomotr-dev'
                package: '**/PomotrApp.zip'        
